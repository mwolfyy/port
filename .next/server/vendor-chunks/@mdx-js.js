"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdx-js";
exports.ids = ["vendor-chunks/@mdx-js"];
exports.modules = {

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/compile.js":
/*!*************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/compile.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   compileSync: () => (/* binding */ compileSync)\n/* harmony export */ });\n/* harmony import */ var _util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/resolve-file-and-options.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/core.js\");\n/**\n * @import {Compatible, VFile} from 'vfile'\n * @import {ProcessorOptions} from './core.js'\n */\n\n/**\n * @typedef {Omit<ProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'md' | 'mdx' | null | undefined} [format='detect']\n *   Format of `file` (default: `'detect'`).\n *\n * @typedef {CoreProcessorOptions & ExtraOptions} CompileOptions\n *   Configuration for `compile`.\n *\n *   `CompileOptions` is the same as `ProcessorOptions` with the exception that\n *   the `format` option supports a `'detect'` value, which is the default.\n *   The `'detect'` format means to use `'md'` for files with an extension in\n *   `mdExtensions` and `'mdx'` otherwise.\n */\n\n\n\n\n/**\n * Compile MDX to JS.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {Promise<VFile>}\n *   Promise to compiled file.\n */\nfunction compile(vfileCompatible, compileOptions) {\n  const {file, options} = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions)\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).process(file)\n}\n\n/**\n * Synchronously compile MDX to JS.\n *\n * When possible please use the async `compile`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {VFile}\n *   Compiled file.\n */\nfunction compileSync(vfileCompatible, compileOptions) {\n  const {file, options} = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions)\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).processSync(file)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL2NvbXBpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0EsWUFBWSxtQkFBbUI7QUFDL0IsWUFBWSxrQkFBa0I7QUFDOUI7O0FBRUE7QUFDQSxhQUFhLGtDQUFrQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNENBQTRDO0FBQzFEO0FBQ0E7QUFDQSxhQUFhLHFDQUFxQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0U7QUFDL0I7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNPO0FBQ1AsU0FBUyxlQUFlLEVBQUUsd0ZBQXFCO0FBQy9DLFNBQVMseURBQWU7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNPO0FBQ1AsU0FBUyxlQUFlLEVBQUUsd0ZBQXFCO0FBQy9DLFNBQVMseURBQWU7QUFDeEIiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9jb21waWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Q29tcGF0aWJsZSwgVkZpbGV9IGZyb20gJ3ZmaWxlJ1xuICogQGltcG9ydCB7UHJvY2Vzc29yT3B0aW9uc30gZnJvbSAnLi9jb3JlLmpzJ1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09taXQ8UHJvY2Vzc29yT3B0aW9ucywgJ2Zvcm1hdCc+fSBDb3JlUHJvY2Vzc29yT3B0aW9uc1xuICogICBDb3JlIGNvbmZpZ3VyYXRpb24uXG4gKlxuICogQHR5cGVkZWYgRXh0cmFPcHRpb25zXG4gKiAgIEV4dHJhIGNvbmZpZ3VyYXRpb24uXG4gKiBAcHJvcGVydHkgeydkZXRlY3QnIHwgJ21kJyB8ICdtZHgnIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Zvcm1hdD0nZGV0ZWN0J11cbiAqICAgRm9ybWF0IG9mIGBmaWxlYCAoZGVmYXVsdDogYCdkZXRlY3QnYCkuXG4gKlxuICogQHR5cGVkZWYge0NvcmVQcm9jZXNzb3JPcHRpb25zICYgRXh0cmFPcHRpb25zfSBDb21waWxlT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgY29tcGlsZWAuXG4gKlxuICogICBgQ29tcGlsZU9wdGlvbnNgIGlzIHRoZSBzYW1lIGFzIGBQcm9jZXNzb3JPcHRpb25zYCB3aXRoIHRoZSBleGNlcHRpb24gdGhhdFxuICogICB0aGUgYGZvcm1hdGAgb3B0aW9uIHN1cHBvcnRzIGEgYCdkZXRlY3QnYCB2YWx1ZSwgd2hpY2ggaXMgdGhlIGRlZmF1bHQuXG4gKiAgIFRoZSBgJ2RldGVjdCdgIGZvcm1hdCBtZWFucyB0byB1c2UgYCdtZCdgIGZvciBmaWxlcyB3aXRoIGFuIGV4dGVuc2lvbiBpblxuICogICBgbWRFeHRlbnNpb25zYCBhbmQgYCdtZHgnYCBvdGhlcndpc2UuXG4gKi9cblxuaW1wb3J0IHtyZXNvbHZlRmlsZUFuZE9wdGlvbnN9IGZyb20gJy4vdXRpbC9yZXNvbHZlLWZpbGUtYW5kLW9wdGlvbnMuanMnXG5pbXBvcnQge2NyZWF0ZVByb2Nlc3Nvcn0gZnJvbSAnLi9jb3JlLmpzJ1xuXG4vKipcbiAqIENvbXBpbGUgTURYIHRvIEpTLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBNRFggZG9jdW1lbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBpbGVPcHRpb25zPiB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21waWxlT3B0aW9uc11cbiAqICAgQ29tcGlsZSBjb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuIHtQcm9taXNlPFZGaWxlPn1cbiAqICAgUHJvbWlzZSB0byBjb21waWxlZCBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZSh2ZmlsZUNvbXBhdGlibGUsIGNvbXBpbGVPcHRpb25zKSB7XG4gIGNvbnN0IHtmaWxlLCBvcHRpb25zfSA9IHJlc29sdmVGaWxlQW5kT3B0aW9ucyh2ZmlsZUNvbXBhdGlibGUsIGNvbXBpbGVPcHRpb25zKVxuICByZXR1cm4gY3JlYXRlUHJvY2Vzc29yKG9wdGlvbnMpLnByb2Nlc3MoZmlsZSlcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IGNvbXBpbGUgTURYIHRvIEpTLlxuICpcbiAqIFdoZW4gcG9zc2libGUgcGxlYXNlIHVzZSB0aGUgYXN5bmMgYGNvbXBpbGVgLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBNRFggZG9jdW1lbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBpbGVPcHRpb25zPiB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21waWxlT3B0aW9uc11cbiAqICAgQ29tcGlsZSBjb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuIHtWRmlsZX1cbiAqICAgQ29tcGlsZWQgZmlsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVTeW5jKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpIHtcbiAgY29uc3Qge2ZpbGUsIG9wdGlvbnN9ID0gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpXG4gIHJldHVybiBjcmVhdGVQcm9jZXNzb3Iob3B0aW9ucykucHJvY2Vzc1N5bmMoZmlsZSlcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/compile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/core.js":
/*!**********************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! recma-build-jsx */ \"(rsc)/./node_modules/recma-build-jsx/lib/index.js\");\n/* harmony import */ var recma_jsx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! recma-jsx */ \"(rsc)/./node_modules/recma-jsx/lib/index.js\");\n/* harmony import */ var recma_stringify__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! recma-stringify */ \"(rsc)/./node_modules/recma-stringify/lib/index.js\");\n/* harmony import */ var rehype_recma__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rehype-recma */ \"(rsc)/./node_modules/rehype-recma/lib/index.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(rsc)/./node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(rsc)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(rsc)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(rsc)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-build-jsx-transform.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @import {Program} from 'estree-jsx'\n * @import {Root} from 'mdast'\n * @import {Options as RehypeRecmaOptions} from 'rehype-recma'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {SourceMapGenerator} from 'source-map'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {typeof SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {RehypeRecmaOptions['elementAttributeNameCase']} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {RehypeRecmaOptions['stylePropertyNameCase']} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n  'compilers',\n  'filepath',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\nlet warned = false\n\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor<Root, Program, Program, Program, string>}\n *   Processor.\n */\nfunction createProcessor(options) {\n  const settings = options || {}\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (key in settings) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n        'Unexpected removed option `' +\n          key +\n          '`; see <https://mdxjs.com/migrating/v2/> on how to migrate'\n      )\n    }\n  }\n\n  // @ts-expect-error: throw an error for a runtime value which is not allowed\n  // by the types.\n  if (settings.format === 'detect') {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n      \"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\"\n    )\n  }\n\n  if (\n    (settings.jsxRuntime === 'classic' ||\n      settings.pragma ||\n      settings.pragmaFrag ||\n      settings.pragmaImportSource) &&\n    !warned\n  ) {\n    warned = true\n    console.warn(\n      \"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\"\n    )\n  }\n\n  const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n\n  if (settings.format !== 'md') {\n    pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n  }\n\n  const remarkRehypeOptions = settings.remarkRehypeOptions || {}\n\n  pipeline\n    .use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel)\n    .use(settings.remarkPlugins || [])\n    .use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...(remarkRehypeOptions.passThrough || []), ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes]\n    })\n    .use(settings.rehypePlugins || [])\n\n  if (settings.format === 'md') {\n    pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw)\n  }\n\n  pipeline\n    // @ts-expect-error: `Program` is close enough to a `Node`,\n    // but type inference has trouble with it and bridges.\n    .use(rehype_recma__WEBPACK_IMPORTED_MODULE_8__[\"default\"], settings)\n    .use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings)\n    .use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings)\n\n  if (!settings.jsx) {\n    pipeline.use(recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__[\"default\"], settings).use(_plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__.recmaBuildJsxTransform, settings)\n  }\n\n  pipeline\n    .use(recma_jsx__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n    .use(recma_stringify__WEBPACK_IMPORTED_MODULE_14__[\"default\"], settings)\n    .use(settings.recmaPlugins || [])\n\n  // @ts-expect-error: TS doesn’t get the plugins we added with if-statements.\n  return pipeline\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/node-types.js":
/*!****************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nconst nodeTypes = /** @type {const} */ ([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkJBQTZCLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvbm9kZS10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2Ygbm9kZSB0eXBlcyBtYWRlIGJ5IGBtZGFzdC11dGlsLW1keGAsIHdoaWNoIGhhdmUgdG8gYmUgcGFzc2VkXG4gKiB0aHJvdWdoIHVudG91Y2hlZCBmcm9tIHRoZSBtZGFzdCB0cmVlIHRvIHRoZSBoYXN0IHRyZWUuXG4gKi9cbmV4cG9ydCBjb25zdCBub2RlVHlwZXMgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuICAnbWR4Rmxvd0V4cHJlc3Npb24nLFxuICAnbWR4SnN4Rmxvd0VsZW1lbnQnLFxuICAnbWR4SnN4VGV4dEVsZW1lbnQnLFxuICAnbWR4VGV4dEV4cHJlc3Npb24nLFxuICAnbWR4anNFc20nXG5dKVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaBuildJsxTransform: () => (/* binding */ recmaBuildJsxTransform)\n/* harmony export */ });\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {Program} from 'estree-jsx'\n */ /**\n * @typedef Options\n *   Configuration for internal plugin `recma-build-jsx-transform`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n */ \n\n/**\n * Plugin to change the tree after compiling JSX away.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaBuildJsxTransform(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === 'function-body') {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if ('directive' in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === 'ImportDeclaration' && typeof declaration.source.value === 'string' && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: 'VariableDeclaration',\n                    kind: 'const',\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__.toIdOrMemberExpression)([\n                        'arguments',\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1idWlsZC1qc3gtdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBRUQ7Ozs7OztDQU1DLEdBRXlGO0FBQ0Y7QUFFeEY7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLHVCQUF1QkMsT0FBTztJQUM1QyxtREFBbUQsR0FDbkQsTUFBTSxFQUFDQyxZQUFZLEVBQUMsR0FBR0QsV0FBVyxDQUFDO0lBRW5DOzs7OztHQUtDLEdBQ0QsT0FBTyxTQUFVRSxJQUFJO1FBQ25CLDBFQUEwRTtRQUMxRSxVQUFVO1FBQ1YsSUFBSUEsS0FBS0MsUUFBUSxFQUFFO1lBQ2pCRCxLQUFLQyxRQUFRLEdBQUdELEtBQUtDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDLFNBQVVDLENBQUM7Z0JBQzlDLE9BQU8sQ0FBQ0EsRUFBRUMsSUFBSSxFQUFFQztZQUNsQjtRQUNGO1FBRUEsc0VBQXNFO1FBQ3RFLHVFQUF1RTtRQUN2RSxXQUFXO1FBQ1gsSUFBSU4saUJBQWlCLGlCQUFpQjtZQUNwQyxJQUFJTyxRQUFRO1lBRVosd0VBQXdFO1lBQ3hFLGtCQUFrQjtZQUNsQixzREFBc0Q7WUFDdEQsTUFBT0EsUUFBUU4sS0FBS08sSUFBSSxDQUFDQyxNQUFNLENBQUU7Z0JBQy9CLE1BQU1DLFFBQVFULEtBQUtPLElBQUksQ0FBQ0QsTUFBTTtnQkFDOUIsSUFBSSxlQUFlRyxTQUFTQSxNQUFNQyxTQUFTLEVBQUU7b0JBQzNDSjtnQkFDRixPQUFPO29CQUNMO2dCQUNGO1lBQ0Y7WUFFQSxNQUFNSyxjQUFjWCxLQUFLTyxJQUFJLENBQUNELE1BQU07WUFFcEMsSUFDRUssZUFDQUEsWUFBWUMsSUFBSSxLQUFLLHVCQUNyQixPQUFPRCxZQUFZRSxNQUFNLENBQUNDLEtBQUssS0FBSyxZQUNwQyx3QkFBd0JDLElBQUksQ0FBQ0osWUFBWUUsTUFBTSxDQUFDQyxLQUFLLEdBQ3JEO2dCQUNBZCxLQUFLTyxJQUFJLENBQUNELE1BQU0sR0FBRztvQkFDakJNLE1BQU07b0JBQ05JLE1BQU07b0JBQ05DLGNBQWN0Qix5R0FBd0JBLENBQ3BDZ0IsWUFBWU8sVUFBVSxFQUN0QnRCLHVHQUFzQkEsQ0FBQzt3QkFBQzt3QkFBYTtxQkFBRTtnQkFFM0M7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1idWlsZC1qc3gtdHJhbnNmb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7UHJvZ3JhbX0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgaW50ZXJuYWwgcGx1Z2luIGByZWNtYS1idWlsZC1qc3gtdHJhbnNmb3JtYC5cbiAqIEBwcm9wZXJ0eSB7J2Z1bmN0aW9uLWJvZHknIHwgJ3Byb2dyYW0nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW291dHB1dEZvcm1hdD0ncHJvZ3JhbSddXG4gKiAgIFdoZXRoZXIgdG8ga2VlcCB0aGUgaW1wb3J0IG9mIHRoZSBhdXRvbWF0aWMgcnVudGltZSBvciBnZXQgaXQgZnJvbVxuICogICBgYXJndW1lbnRzWzBdYCBpbnN0ZWFkIChkZWZhdWx0OiBgJ3Byb2dyYW0nYCkuXG4gKi9cblxuaW1wb3J0IHtzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnN9IGZyb20gJy4uL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanMnXG5pbXBvcnQge3RvSWRPck1lbWJlckV4cHJlc3Npb259IGZyb20gJy4uL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanMnXG5cbi8qKlxuICogUGx1Z2luIHRvIGNoYW5nZSB0aGUgdHJlZSBhZnRlciBjb21waWxpbmcgSlNYIGF3YXkuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxPcHRpb25zPiB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNtYUJ1aWxkSnN4VHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgLyogYzggaWdub3JlIG5leHQgLS0gYWx3YXlzIGdpdmVuIGluIGBAbWR4LWpzL21keGAgKi9cbiAgY29uc3Qge291dHB1dEZvcm1hdH0gPSBvcHRpb25zIHx8IHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIC8vIFJlbW92ZSB0aGUgcHJhZ21hIGNvbW1lbnQgdGhhdCB3ZSBpbmplY3RlZCBvdXJzZWx2ZXMgYXMgaXQgaXMgbm8gbG9uZ2VyXG4gICAgLy8gbmVlZGVkLlxuICAgIGlmICh0cmVlLmNvbW1lbnRzKSB7XG4gICAgICB0cmVlLmNvbW1lbnRzID0gdHJlZS5jb21tZW50cy5maWx0ZXIoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuICFkLmRhdGE/Ll9tZHhJc1ByYWdtYUNvbW1lbnRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gV2hlbiBjb21waWxpbmcgdG8gYSBmdW5jdGlvbiBib2R5LCByZXBsYWNlIHRoZSBpbXBvcnQgdGhhdCB3YXMganVzdFxuICAgIC8vIGdlbmVyYXRlZCwgYW5kIGdldCBganN4YCwgYGpzeHNgLCBhbmQgYEZyYWdtZW50YCBmcm9tIGBhcmd1bWVudHNbMF1gXG4gICAgLy8gaW5zdGVhZC5cbiAgICBpZiAob3V0cHV0Rm9ybWF0ID09PSAnZnVuY3Rpb24tYm9keScpIHtcbiAgICAgIGxldCBpbmRleCA9IDBcblxuICAgICAgLy8gU2tpcCBkaXJlY3RpdmVzOiBKUyBjdXJyZW50bHkgb25seSBoYXMgYHVzZSBzdHJpY3RgLCBidXQgQWNvcm4gYWxsb3dzXG4gICAgICAvLyBhcmJpdHJhcnkgb25lcy5cbiAgICAgIC8vIFByYWN0aWNhbGx5IHRoaW5ncyBsaWtlIGB1c2UgY2xpZW50YCBjb3VsZCBiZSB1c2VkP1xuICAgICAgd2hpbGUgKGluZGV4IDwgdHJlZS5ib2R5Lmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IHRyZWUuYm9keVtpbmRleF1cbiAgICAgICAgaWYgKCdkaXJlY3RpdmUnIGluIGNoaWxkICYmIGNoaWxkLmRpcmVjdGl2ZSkge1xuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gdHJlZS5ib2R5W2luZGV4XVxuXG4gICAgICBpZiAoXG4gICAgICAgIGRlY2xhcmF0aW9uICYmXG4gICAgICAgIGRlY2xhcmF0aW9uLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIGRlY2xhcmF0aW9uLnNvdXJjZS52YWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgL1xcL2pzeC0oZGV2LSk/cnVudGltZSQvLnRlc3QoZGVjbGFyYXRpb24uc291cmNlLnZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIHRyZWUuYm9keVtpbmRleF0gPSB7XG4gICAgICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRpb24nLFxuICAgICAgICAgIGtpbmQ6ICdjb25zdCcsXG4gICAgICAgICAgZGVjbGFyYXRpb25zOiBzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMoXG4gICAgICAgICAgICBkZWNsYXJhdGlvbi5zcGVjaWZpZXJzLFxuICAgICAgICAgICAgdG9JZE9yTWVtYmVyRXhwcmVzc2lvbihbJ2FyZ3VtZW50cycsIDBdKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbInNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyIsInRvSWRPck1lbWJlckV4cHJlc3Npb24iLCJyZWNtYUJ1aWxkSnN4VHJhbnNmb3JtIiwib3B0aW9ucyIsIm91dHB1dEZvcm1hdCIsInRyZWUiLCJjb21tZW50cyIsImZpbHRlciIsImQiLCJkYXRhIiwiX21keElzUHJhZ21hQ29tbWVudCIsImluZGV4IiwiYm9keSIsImxlbmd0aCIsImNoaWxkIiwiZGlyZWN0aXZlIiwiZGVjbGFyYXRpb24iLCJ0eXBlIiwic291cmNlIiwidmFsdWUiLCJ0ZXN0Iiwia2luZCIsImRlY2xhcmF0aW9ucyIsInNwZWNpZmllcnMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!***************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! estree-util-scope */ \"(rsc)/./node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      CallExpression,\n      Directive,\n      ExportAllDeclaration,\n      ExportDefaultDeclaration,\n      ExportNamedDeclaration,\n      ExportSpecifier,\n      Expression,\n      FunctionDeclaration,\n      Identifier,\n      ImportDeclaration,\n      ImportDefaultSpecifier,\n      ImportExpression,\n      ImportSpecifier,\n      JSXElement,\n      JSXFragment,\n      Literal,\n      ModuleDeclaration,\n      Node,\n      Program,\n      Property,\n      SimpleLiteral,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */\nfunction recmaDocument(options) {\n  const baseUrl = options.baseUrl || undefined\n  const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl\n  const outputFormat = options.outputFormat || 'program'\n  const pragma =\n    options.pragma === undefined ? 'React.createElement' : options.pragma\n  const pragmaFrag =\n    options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag\n  const pragmaImportSource = options.pragmaImportSource || 'react'\n  const jsxImportSource = options.jsxImportSource || 'react'\n  const jsxRuntime = options.jsxRuntime || 'automatic'\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    /** @type {Array<[string, string] | string>} */\n    const exportedValues = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      injectPragma(tree, '@jsxFrag', pragmaFrag)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      injectPragma(tree, '@jsx', pragma)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      injectPragma(tree, '@jsxImportSource', jsxImportSource)\n    }\n\n    if (jsxRuntime) {\n      injectPragma(tree, '@jsxRuntime', jsxRuntime)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```tsx\n      // export default properties => <>{properties.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Unexpected duplicate layout, expected a single layout (previous: ' +\n              (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) +\n              ')',\n            {\n              ancestors: [tree, child],\n              place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n              ruleId: 'duplicate-layout',\n              source: 'recma-document'\n            }\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__.isDeclaration)(child.declaration)\n                ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__.declarationToExpression)(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```tsx\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        // Cast because always simple.\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter(function (specifier) {\n          if (\n            specifier.exported.type === 'Identifier' &&\n            specifier.exported.name === 'default'\n          ) {\n            if (layout) {\n              file.fail(\n                'Unexpected duplicate layout, expected a single layout (previous: ' +\n                  (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) +\n                  ')',\n                {\n                  ancestors: [tree, child, specifier],\n                  place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n                  ruleId: 'duplicate-layout',\n                  source: 'recma-document'\n                }\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name === 'default'\n            ) {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```tsx\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        (child.expression.type === 'JSXElement' ||\n          child.expression.type === 'JSXFragment')\n      ) {\n        content = true\n        replacement.push(\n          ...createMdxContent(child.expression, outputFormat, Boolean(layout))\n        )\n      } else {\n        // This catch-all branch is because plugins might add other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(\n        ...createMdxContent(undefined, outputFormat, Boolean(layout))\n      )\n    }\n\n    exportedValues.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */\n              function (_, index) {\n                return {\n                  type: 'SpreadElement',\n                  argument: {\n                    type: 'Identifier',\n                    name: '_exportAll' + (index + 1)\n                  }\n                }\n              }\n            ),\n            ...exportedValues.map(function (d) {\n              /** @type {Property} */\n              const property = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return property\n            })\n          ]\n        }\n      })\n    }\n\n    tree.body = replacement\n\n    let usesImportMetaUrlVariable = false\n    let usesResolveDynamicHelper = false\n\n    if (baseHref || outputFormat === 'function-body') {\n      (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n        enter(node) {\n          if (\n            (node.type === 'ExportAllDeclaration' ||\n              node.type === 'ExportNamedDeclaration' ||\n              node.type === 'ImportDeclaration') &&\n            node.source\n          ) {\n            // We never hit this branch when generating function bodies, as\n            // statements are already compiled away into import expressions.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(baseHref, 'unexpected missing `baseHref` in branch')\n\n            let value = node.source.value\n            // The literal source for statements can only be string.\n            ;(0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof value === 'string', 'expected string source')\n\n            // Resolve a specifier.\n            // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n            // be injected to work with expressions at runtime, but as we have\n            // `baseHref` at compile time here and statements are static\n            // strings, we can do it now.\n            try {\n              // To do: next major: use `URL.canParse`.\n              // eslint-disable-next-line no-new\n              new URL(value)\n              // Fine: a full URL.\n            } catch {\n              if (\n                value.startsWith('/') ||\n                value.startsWith('./') ||\n                value.startsWith('../')\n              ) {\n                value = new URL(value, baseHref).href\n              } else {\n                // Fine: are bare specifier.\n              }\n            }\n\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node.source, replacement)\n            node.source = replacement\n            return\n          }\n\n          if (node.type === 'ImportExpression') {\n            usesResolveDynamicHelper = true\n            /** @type {CallExpression} */\n            const replacement = {\n              type: 'CallExpression',\n              callee: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n              arguments: [node.source],\n              optional: false\n            }\n            node.source = replacement\n            return\n          }\n\n          // To do: add support for `import.meta.resolve`.\n\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            usesImportMetaUrlVariable = true\n            /** @type {Identifier} */\n            const replacement = {type: 'Identifier', name: '_importMetaUrl'}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, replacement)\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    if (usesResolveDynamicHelper) {\n      if (!baseHref) {\n        usesImportMetaUrlVariable = true\n      }\n\n      tree.body.push(\n        resolveDynamicMdxSpecifier(\n          baseHref\n            ? {type: 'Literal', value: baseHref}\n            : {type: 'Identifier', name: '_importMetaUrl'}\n        )\n      )\n    }\n\n    if (usesImportMetaUrlVariable) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(\n        outputFormat === 'function-body',\n        'expected `function-body` when using dynamic url injection'\n      )\n      tree.body.unshift(...createImportMetaUrlVariable())\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```tsx\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_7__.createVisitors)()\n          // Walk the top-level scope.\n          ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node, {\n            enter(node) {\n              visitors.enter(node)\n\n              if (\n                node.type === 'ArrowFunctionExpression' ||\n                node.type === 'FunctionDeclaration' ||\n                node.type === 'FunctionExpression'\n              ) {\n                this.skip()\n                visitors.exit(node)\n              }\n            },\n            leave: visitors.exit\n          })\n          exportedValues.push(...visitors.scopes[0].defined)\n        }\n\n        // ```tsx\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          if (child.exported.type === 'Identifier') {\n            exportedValues.push(child.exported.name)\n            /* c8 ignore next 5 -- to do: <https://github.com/mdx-js/mdx/issues/2536> */\n          } else {\n            // Must be string.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof child.exported.value === 'string')\n            exportedValues.push(child.exported.value)\n          }\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleEsm(node) {\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          // We always have a source, but types say they can be missing.\n          (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(node.source, 'expected `node.source` to be defined')\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = []\n\n          for (const specifier of node.specifiers) {\n            // `id` can only be an identifier,\n            // so we ignore literal.\n            if (\n              specifier.exported.type === 'Identifier' &&\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name !== specifier.exported.name\n            ) {\n              declarators.push({\n                type: 'VariableDeclarator',\n                id: specifier.exported,\n                init: specifier.local\n              })\n            }\n          }\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */\n  function createMdxContent(content, outputFormat, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument =\n      // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ (\n        content || {type: 'Identifier', name: 'undefined'}\n      )\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument.type === 'JSXFragment' &&\n      argument.children.length === 1 &&\n      argument.children[0].type === 'JSXElement'\n    ) {\n      argument = argument.children[0]\n    }\n\n    let awaitExpression = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n      enter(node) {\n        if (\n          node.type === 'ArrowFunctionExpression' ||\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression'\n        ) {\n          return this.skip()\n        }\n\n        if (\n          node.type === 'AwaitExpression' ||\n          /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */\n          (node.type === 'ForOfStatement' && node.await)\n        ) {\n          awaitExpression = true\n        }\n      }\n    })\n\n    /** @type {FunctionDeclaration} */\n    const declaration = {\n      type: 'FunctionDeclaration',\n      id: {type: 'Identifier', name: 'MDXContent'},\n      params: [\n        {\n          type: 'AssignmentPattern',\n          left: {type: 'Identifier', name: 'props'},\n          right: {type: 'ObjectExpression', properties: []}\n        }\n      ],\n      body: {\n        type: 'BlockStatement',\n        body: [{type: 'ReturnStatement', argument: result}]\n      }\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        async: awaitExpression,\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ReturnStatement',\n              // Cast because TS doesn’t think `JSXFragment` is an expression.\n              // eslint-disable-next-line object-shorthand\n              argument: /** @type {Expression} */ (argument)\n            }\n          ]\n        }\n      },\n      outputFormat === 'program'\n        ? {type: 'ExportDefaultDeclaration', declaration}\n        : declaration\n    ]\n  }\n}\n\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */\nfunction injectPragma(tree, name, value) {\n  tree.comments?.unshift({\n    type: 'Block',\n    value: name + ' ' + value,\n    data: {_mdxIsPragmaComment: true}\n  })\n}\n\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */\nfunction resolveDynamicMdxSpecifier(importMetaUrl) {\n  return {\n    type: 'FunctionDeclaration',\n    id: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n    generator: false,\n    async: false,\n    params: [{type: 'Identifier', name: 'd'}],\n    body: {\n      type: 'BlockStatement',\n      body: [\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'BinaryExpression',\n            left: {\n              type: 'UnaryExpression',\n              operator: 'typeof',\n              prefix: true,\n              argument: {type: 'Identifier', name: 'd'}\n            },\n            operator: '!==',\n            right: {type: 'Literal', value: 'string'}\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {type: 'Identifier', name: 'd'}\n          },\n          alternate: null\n        },\n        // To do: use `URL.canParse` when widely supported (see commented\n        // out code below).\n        {\n          type: 'TryStatement',\n          block: {\n            type: 'BlockStatement',\n            body: [\n              {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'NewExpression',\n                  callee: {type: 'Identifier', name: 'URL'},\n                  arguments: [{type: 'Identifier', name: 'd'}]\n                }\n              },\n              {\n                type: 'ReturnStatement',\n                argument: {type: 'Identifier', name: 'd'}\n              }\n            ]\n          },\n          handler: {\n            type: 'CatchClause',\n            param: null,\n            body: {type: 'BlockStatement', body: []}\n          },\n          finalizer: null\n        },\n        // To do: use `URL.canParse` when widely supported.\n        // {\n        //   type: 'IfStatement',\n        //   test: {\n        //     type: 'CallExpression',\n        //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n        //     arguments: [{type: 'Identifier', name: 'd'}],\n        //     optional: false\n        //   },\n        //   consequent: {\n        //     type: 'ReturnStatement',\n        //     argument: {type: 'Identifier', name: 'd'}\n        //   },\n        //   alternate: null\n        // },\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'LogicalExpression',\n            left: {\n              type: 'LogicalExpression',\n              left: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: '/'}],\n                optional: false\n              },\n              operator: '||',\n              right: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: './'}],\n                optional: false\n              }\n            },\n            operator: '||',\n            right: {\n              type: 'CallExpression',\n              callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n              arguments: [{type: 'Literal', value: '../'}],\n              optional: false\n            }\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {\n              type: 'MemberExpression',\n              object: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'URL'},\n                arguments: [{type: 'Identifier', name: 'd'}, importMetaUrl]\n              },\n              property: {type: 'Identifier', name: 'href'},\n              computed: false,\n              optional: false\n            }\n          },\n          alternate: null\n        },\n        {\n          type: 'ReturnStatement',\n          argument: {type: 'Identifier', name: 'd'}\n        }\n      ]\n    }\n  }\n}\n\n/**\n * @returns {Array<Statement>}\n */\nfunction createImportMetaUrlVariable() {\n  return [\n    {\n      type: 'VariableDeclaration',\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: '_importMetaUrl'},\n          init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['arguments', 0, 'baseUrl'])\n        }\n      ],\n      kind: 'const'\n    },\n    {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        prefix: true,\n        argument: {type: 'Identifier', name: '_importMetaUrl'}\n      },\n      consequent: {\n        type: 'ThrowStatement',\n        argument: {\n          type: 'NewExpression',\n          callee: {type: 'Identifier', name: 'Error'},\n          arguments: [\n            {\n              type: 'Literal',\n              value:\n                'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'\n            }\n          ]\n        }\n      },\n      alternate: null\n    }\n  ]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-scope */ \"(rsc)/./node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      Expression,\n      Function as EstreeFunction,\n      Identifier,\n      ImportSpecifier,\n      JSXElement,\n      ModuleDeclaration,\n      ObjectPattern,\n      Program,\n      Property,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {Scope} from 'estree-util-scope'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n/**\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction recmaJsxRewrite(options) {\n  const {development, outputFormat, providerImportSource} = options\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_1__.createVisitors)()\n    /** @type {Array<StackEntry>} */\n    const functionStack = []\n    let importProvider = false\n    let createErrorHelper = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n      enter(node) {\n        visitors.enter(node)\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          functionStack.push({\n            components: [],\n            idToInvalidComponentName: new Map(),\n            node,\n            objects: [],\n            references: {},\n            tags: []\n          })\n\n          // `MDXContent` only ever contains `MDXLayout`.\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            !inScope(visitors.scopes, 'MDXLayout')\n          ) {\n            functionStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const functionInfo = functionStack[0]\n\n        if (\n          !functionInfo ||\n          (!isNamedFunction(functionInfo.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n            const isInScope = inScope(visitors.scopes, id)\n\n            if (\n              !Object.hasOwn(functionInfo.references, fullId) &&\n              (!isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (functionStack.length === 1 &&\n                  functionStack[0].node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(functionStack[0].node, '_createMdxContent')))\n            ) {\n              functionInfo.references[fullId] = {component: true, node}\n            }\n\n            if (!functionInfo.objects.includes(id) && !isInScope) {\n              functionInfo.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(visitors.scopes, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (\n                id !== 'MDXLayout' &&\n                !Object.hasOwn(functionInfo.references, id)\n              ) {\n                functionInfo.references[id] = {component: true, node}\n              }\n\n              if (!functionInfo.components.includes(id)) {\n                functionInfo.components.push(id)\n              }\n            }\n          } else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!functionInfo.tags.includes(id)) {\n              functionInfo.tags.push(id)\n            }\n\n            /** @type {Array<number | string>} */\n            let jsxIdExpression = ['_components', id]\n            if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n              let invalidComponentName =\n                functionInfo.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${functionInfo.idToInvalidComponentName.size}`\n                functionInfo.idToInvalidComponentName.set(\n                  id,\n                  invalidComponentName\n                )\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        visitors.exit(node)\n\n        /** @type {Array<Property | SpreadElement>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const functionInfo = functionStack[functionStack.length - 1]\n\n          /** @type {string} */\n          let name\n\n          for (name of functionInfo.tags.sort()) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...functionInfo.components)\n\n          for (name of functionInfo.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          actual.sort()\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            functionInfo.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(functionInfo.node, 'MDXContent') ||\n              isNamedFunction(functionInfo.node, '_createMdxContent')\n            ) {\n              parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              for (const parameter of parameters) {\n                defaults.push({type: 'SpreadElement', argument: parameter})\n              }\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              defaults.length > 0\n                ? {type: 'ObjectExpression', properties: defaults}\n                : // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```tsx\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map(function (name) {\n                  return {\n                    type: 'Property',\n                    kind: 'init',\n                    key: {\n                      type: 'Identifier',\n                      name: name === 'MDXLayout' ? 'wrapper' : name\n                    },\n                    value: {type: 'Identifier', name},\n                    method: false,\n                    shorthand: name !== 'MDXLayout',\n                    computed: false\n                  }\n                })\n              }\n            }\n\n            if (functionInfo.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(functionInfo.node, '_createMdxContent')) {\n              for (const [id, componentName] of [\n                ...functionInfo.idToInvalidComponentName\n              ].sort(function ([a], [b]) {\n                return a.localeCompare(b)\n              })) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: componentName\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in functionInfo.references) {\n            if (Object.hasOwn(functionInfo.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!Object.hasOwn(functionInfo.references, partial)) {\n                  functionInfo.references[partial] = {\n                    component: false,\n                    node: functionInfo.references[key].node\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(functionInfo.references).sort()\n\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = functionInfo.references[id]\n            const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place) {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: undefined\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (node.body.type !== 'BlockStatement') {\n              node.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: node.body}]\n              }\n            }\n\n            node.body.body.unshift(...statements)\n          }\n\n          functionStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [(0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n\n    if (outputFormat === 'function-body') {\n      tree.body.unshift({\n        type: 'ExpressionStatement',\n        expression: {type: 'Literal', value: 'use strict'},\n        directive: 'use strict'\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(\n          specifiers,\n          (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Array<Scope>} scopes\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */\nfunction inScope(scopes, id) {\n  let index = scopes.length\n\n  while (index--) {\n    const scope = scopes[index]\n\n    if (scope.defined.includes(id)) {\n      return true\n    }\n  }\n\n  return false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root} from 'hast'\n */\n\n\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */\nfunction rehypeRemoveRaw() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'raw', function (_, index, parent) {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVtb3ZlLXJhdy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCOztBQUVzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVtb3ZlLXJhdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1Jvb3R9IGZyb20gJ2hhc3QnXG4gKi9cblxuaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBBIHRpbnkgcGx1Z2luIHRoYXQgcmVtb3ZlcyByYXcgSFRNTC5cbiAqXG4gKiBUaGlzIGlzIG5lZWRlZCBpZiB0aGUgZm9ybWF0IGlzIGBtZGAgYW5kIGByZWh5cGUtcmF3YCB3YXMgbm90IHVzZWQgdG8gcGFyc2VcbiAqIGRhbmdlcm91cyBIVE1MIGludG8gbm9kZXMuXG4gKlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVoeXBlUmVtb3ZlUmF3KCkge1xuICAvKipcbiAgICogQHBhcmFtIHtSb290fSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgdmlzaXQodHJlZSwgJ3JhdycsIGZ1bmN0aW9uIChfLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50ICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! collapse-white-space */ \"(rsc)/./node_modules/collapse-white-space/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root, RootContent} from 'mdast'\n */\n\n\n\n\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */\nfunction remarkMarkAndUnravel() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, function (node, index, parent) {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_2__.collapseWhiteSpace)(child.value, {style: 'html', trim: true}) === ''\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<RootContent>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n\n      if (\n        (node.type === 'mdxFlowExpression' ||\n          node.type === 'mdxTextExpression' ||\n          node.type === 'mdxjsEsm') &&\n        node.data &&\n        node.data.estree\n      ) {\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node.data.estree, {\n          enter(node) {\n            if (node.type === 'JSXElement') {\n              const data = node.data || (node.data = {})\n              data._mdxExplicitJsx = true\n            }\n          }\n        })\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZW1hcmstbWFyay1hbmQtdW5yYXZlbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjs7QUFFdUQ7QUFDckI7QUFDSTs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLElBQUksdURBQUs7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZLHdFQUFrQixlQUFlLDBCQUEwQjtBQUN2RTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLG9CQUFvQjtBQUN6Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7O0FBRUE7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxtREFBSTtBQUNaO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVtYXJrLW1hcmstYW5kLXVucmF2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtSb290LCBSb290Q29udGVudH0gZnJvbSAnbWRhc3QnXG4gKi9cblxuaW1wb3J0IHtjb2xsYXBzZVdoaXRlU3BhY2V9IGZyb20gJ2NvbGxhcHNlLXdoaXRlLXNwYWNlJ1xuaW1wb3J0IHt3YWxrfSBmcm9tICdlc3RyZWUtd2Fsa2VyJ1xuaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBBIHRpbnkgcGx1Z2luIHRoYXQgdW5yYXZlbHMgYDxwPjxoMT54PC9oMT48L3A+YCBidXQgYWxzb1xuICogYDxwPjxDb21wb25lbnQgLz48L3A+YCAoc28gaXQgaGFzIG5vIGtub3dsZWRnZSBvZiDigJxIVE1M4oCdKS5cbiAqXG4gKiBJdCBhbHNvIG1hcmtzIEpTWCBhcyBiZWluZyBleHBsaWNpdGx5IEpTWCwgc28gd2hlbiBhIHVzZXIgcGFzc2VzIGEgYGgxYFxuICogY29tcG9uZW50LCBpdCBpcyB1c2VkIGZvciBgIyBoZWFkaW5nYCBidXQgbm90IGZvciBgPGgxPmhlYWRpbmc8L2gxPmAuXG4gKlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtYXJrTWFya0FuZFVucmF2ZWwoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jvb3R9IHRyZWVcbiAgICogICBUcmVlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUpIHtcbiAgICB2aXNpdCh0cmVlLCBmdW5jdGlvbiAobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgICAgbGV0IG9mZnNldCA9IC0xXG4gICAgICBsZXQgYWxsID0gdHJ1ZVxuICAgICAgbGV0IG9uZU9yTW9yZSA9IGZhbHNlXG5cbiAgICAgIGlmIChwYXJlbnQgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyAmJiBub2RlLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlblxuXG4gICAgICAgIHdoaWxlICgrK29mZnNldCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bb2Zmc2V0XVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ21keEpzeFRleHRFbGVtZW50JyB8fFxuICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgb25lT3JNb3JlID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgIGNvbGxhcHNlV2hpdGVTcGFjZShjaGlsZC52YWx1ZSwge3N0eWxlOiAnaHRtbCcsIHRyaW06IHRydWV9KSA9PT0gJydcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEVtcHR5LlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGwgPSBmYWxzZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWxsICYmIG9uZU9yTW9yZSkge1xuICAgICAgICAgIG9mZnNldCA9IC0xXG5cbiAgICAgICAgICAvKiogQHR5cGUge0FycmF5PFJvb3RDb250ZW50Pn0gKi9cbiAgICAgICAgICBjb25zdCBuZXdDaGlsZHJlbiA9IFtdXG5cbiAgICAgICAgICB3aGlsZSAoKytvZmZzZXQgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bb2Zmc2V0XVxuXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ21keEpzeFRleHRFbGVtZW50Jykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUgYmVjYXVzZSBpdCBpcyBmYXN0ZXI7IGNvbnRlbnQgbW9kZWwgaXMgZmluZS5cbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9ICdtZHhKc3hGbG93RWxlbWVudCdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbicpIHtcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlIGJlY2F1c2UgaXQgaXMgZmFzdGVyOyBjb250ZW50IG1vZGVsIGlzIGZpbmUuXG4gICAgICAgICAgICAgIGNoaWxkLnR5cGUgPSAnbWR4Rmxvd0V4cHJlc3Npb24nXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICAgICAgIC9eW1xcdFxcclxcbiBdKyQvLnRlc3QoU3RyaW5nKGNoaWxkLnZhbHVlKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBFbXB0eS5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSwgLi4ubmV3Q2hpbGRyZW4pXG4gICAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhKc3hGbG93RWxlbWVudCcgfHxcbiAgICAgICAgbm9kZS50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YSB8fCAobm9kZS5kYXRhID0ge30pXG4gICAgICAgIGRhdGEuX21keEV4cGxpY2l0SnN4ID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIChub2RlLnR5cGUgPT09ICdtZHhGbG93RXhwcmVzc2lvbicgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbicgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhqc0VzbScpICYmXG4gICAgICAgIG5vZGUuZGF0YSAmJlxuICAgICAgICBub2RlLmRhdGEuZXN0cmVlXG4gICAgICApIHtcbiAgICAgICAgd2Fsayhub2RlLmRhdGEuZXN0cmVlLCB7XG4gICAgICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0pTWEVsZW1lbnQnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGEgfHwgKG5vZGUuZGF0YSA9IHt9KVxuICAgICAgICAgICAgICBkYXRhLl9tZHhFeHBsaWNpdEpzeCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @import {Node} from 'estree-jsx'\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction create(from, to) {\n  /** @type {Array<keyof Node>} */\n  const fields = ['start', 'end', 'loc', 'range']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLFlBQVksTUFBTTtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Tm9kZX0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Tm9kZT59IGZyb21cbiAqICAgTm9kZSB0byB0YWtlIGZyb20uXG4gKiBAcGFyYW0ge05vZGV9IHRvXG4gKiAgIE5vZGUgdG8gYWRkIHRvLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShmcm9tLCB0bykge1xuICAvKiogQHR5cGUge0FycmF5PGtleW9mIE5vZGU+fSAqL1xuICBjb25zdCBmaWVsZHMgPSBbJ3N0YXJ0JywgJ2VuZCcsICdsb2MnLCAncmFuZ2UnXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZmllbGRzLmxlbmd0aCkge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2luZGV4XVxuXG4gICAgaWYgKGZpZWxkIGluIGZyb20pIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSB0aGV54oCZcmUgc2V0dGFibGUuXG4gICAgICB0b1tmaWVsZF0gPSBmcm9tW2ZpZWxkXVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/devlop/lib/development.js\");\n/**\n * @import {\n      Declaration,\n      Expression,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration\n * } from 'estree-jsx'\n */\n\n\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nfunction declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  // This is currently an internal utility so the next shouldn’t happen or a\n  // maintainer is making a mistake.\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === 'ClassDeclaration', 'unexpected node type')\n  return {...declaration, type: 'ClassExpression'}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtZGVjbGFyYXRpb24tdG8tZXhwcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvRkFBb0Y7QUFDL0Y7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBLEVBQUUsMENBQU07QUFDUixVQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWRlY2xhcmF0aW9uLXRvLWV4cHJlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAgICAgIERlY2xhcmF0aW9uLFxuICAgICAgRXhwcmVzc2lvbixcbiAgICAgIE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uLFxuICAgICAgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb25cbiAqIH0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuXG4vKipcbiAqIFR1cm4gYSBkZWNsYXJhdGlvbiBpbnRvIGFuIGV4cHJlc3Npb24uXG4gKlxuICogRG9lc27igJl0IHdvcmsgZm9yIHZhcmlhYmxlIGRlY2xhcmF0aW9ucywgYnV0IHRoYXTigJlzIGZpbmUgZm9yIG91ciB1c2UgY2FzZVxuICogYmVjYXVzZSBjdXJyZW50bHkgd2XigJlyZSB1c2luZyB0aGlzIHV0aWxpdHkgZm9yIGV4cG9ydCBkZWZhdWx0IGRlY2xhcmF0aW9ucyxcbiAqIHdoaWNoIGNhbuKAmXQgY29udGFpbiB2YXJpYWJsZSBkZWNsYXJhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb24+fSBkZWNsYXJhdGlvblxuICogICBEZWNsYXJhdGlvbi5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBFeHByZXNzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb25Ub0V4cHJlc3Npb24oZGVjbGFyYXRpb24pIHtcbiAgaWYgKGRlY2xhcmF0aW9uLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJykge1xuICAgIHJldHVybiB7Li4uZGVjbGFyYXRpb24sIHR5cGU6ICdGdW5jdGlvbkV4cHJlc3Npb24nfVxuICB9XG5cbiAgLy8gVGhpcyBpcyBjdXJyZW50bHkgYW4gaW50ZXJuYWwgdXRpbGl0eSBzbyB0aGUgbmV4dCBzaG91bGRu4oCZdCBoYXBwZW4gb3IgYVxuICAvLyBtYWludGFpbmVyIGlzIG1ha2luZyBhIG1pc3Rha2UuXG4gIGFzc2VydChkZWNsYXJhdGlvbi50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicsICd1bmV4cGVjdGVkIG5vZGUgdHlwZScpXG4gIHJldHVybiB7Li4uZGVjbGFyYXRpb24sIHR5cGU6ICdDbGFzc0V4cHJlc3Npb24nfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @import {\n      Declaration,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration,\n      Node\n * } from 'estree-jsx'\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */\nfunction isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtaXMtZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkVBQTZFO0FBQ3hGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtaXMtZGVjbGFyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAgICAgIERlY2xhcmF0aW9uLFxuICAgICAgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24sXG4gICAgICBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbixcbiAgICAgIE5vZGVcbiAqIH0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIENoZWNrIGlmIGBub2RlYCBpcyBhIGRlY2xhcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbiB8IE5vZGU+fSBub2RlXG4gKiAgIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7bm9kZSBpcyBEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb259XG4gKiAgIFdoZXRoZXIgYG5vZGVgIGlzIGEgZGVjbGFyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlY2xhcmF0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgbm9kZS50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHxcbiAgICAgIG5vZGUudHlwZSA9PT0gJ0NsYXNzRGVjbGFyYXRpb24nIHx8XG4gICAgICBub2RlLnR5cGUgPT09ICdWYXJpYWJsZURlY2xhcmF0aW9uJ1xuICApXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @import {\n      AssignmentProperty,\n      ExportSpecifier,\n      Expression,\n      Identifier,\n      ImportDefaultSpecifier,\n      ImportNamespaceSpecifier,\n      ImportSpecifier,\n      Literal,\n      VariableDeclarator\n * } from 'estree-jsx'\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */\nfunction specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map(function (specifier) {\n        /** @type {Identifier | Literal} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n              ? specifier.exported\n              : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        // To do: what to do about literals?\n        // `const { a: 'b' } = c()` does not work?\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(value.type === 'Identifier')\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand:\n            key.type === 'Identifier' &&\n            value.type === 'Identifier' &&\n            key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFbUM7QUFDVzs7QUFFOUM7QUFDQSxXQUFXLDhJQUE4STtBQUN6SjtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQSxhQUFhLG1FQUFtRTtBQUNoRjtBQUNBO0FBQ0EsYUFBYSxzQ0FBc0M7QUFDbkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsb0JBQW9CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFNO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsU0FBUztBQUM3QixRQUFRLDBDQUFNOztBQUVkLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBTTtBQUNkO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLFNBQVM7QUFDVDtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAgICAgIEFzc2lnbm1lbnRQcm9wZXJ0eSxcbiAgICAgIEV4cG9ydFNwZWNpZmllcixcbiAgICAgIEV4cHJlc3Npb24sXG4gICAgICBJZGVudGlmaWVyLFxuICAgICAgSW1wb3J0RGVmYXVsdFNwZWNpZmllcixcbiAgICAgIEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcixcbiAgICAgIEltcG9ydFNwZWNpZmllcixcbiAgICAgIExpdGVyYWwsXG4gICAgICBWYXJpYWJsZURlY2xhcmF0b3JcbiAqIH0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vZXN0cmVlLXV0aWwtY3JlYXRlLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxSZWFkb25seTxFeHBvcnRTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0RGVmYXVsdFNwZWNpZmllcj4gfCBSZWFkb25seTxJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0U3BlY2lmaWVyPj59IHNwZWNpZmllcnNcbiAqICAgU3BlY2lmaWVycy5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8RXhwcmVzc2lvbj59IGluaXRcbiAqICAgSW5pdGlhbGl6ZXIuXG4gKiBAcmV0dXJucyB7QXJyYXk8VmFyaWFibGVEZWNsYXJhdG9yPn1cbiAqICAgRGVjbGFyYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zKHNwZWNpZmllcnMsIGluaXQpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtBcnJheTxWYXJpYWJsZURlY2xhcmF0b3I+fSAqL1xuICBjb25zdCBkZWNsYXJhdGlvbnMgPSBbXVxuICAvKiogQHR5cGUge0FycmF5PEV4cG9ydFNwZWNpZmllciB8IEltcG9ydERlZmF1bHRTcGVjaWZpZXIgfCBJbXBvcnRTcGVjaWZpZXI+fSAqL1xuICBjb25zdCBvdGhlclNwZWNpZmllcnMgPSBbXVxuICAvLyBDYW4gb25seSBiZSBvbmUgYWNjb3JkaW5nIHRvIEpTIHN5bnRheC5cbiAgLyoqIEB0eXBlIHtJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcblxuICB3aGlsZSAoKytpbmRleCA8IHNwZWNpZmllcnMubGVuZ3RoKSB7XG4gICAgY29uc3Qgc3BlY2lmaWVyID0gc3BlY2lmaWVyc1tpbmRleF1cblxuICAgIGlmIChzcGVjaWZpZXIudHlwZSA9PT0gJ0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcicpIHtcbiAgICAgIGltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IHNwZWNpZmllclxuICAgIH0gZWxzZSB7XG4gICAgICBvdGhlclNwZWNpZmllcnMucHVzaChzcGVjaWZpZXIpXG4gICAgfVxuICB9XG5cbiAgaWYgKGltcG9ydE5hbWVzcGFjZVNwZWNpZmllcikge1xuICAgIC8qKiBAdHlwZSB7VmFyaWFibGVEZWNsYXJhdG9yfSAqL1xuICAgIGNvbnN0IGRlY2xhcmF0b3IgPSB7XG4gICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICAgIGlkOiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIubG9jYWwsXG4gICAgICBpbml0XG4gICAgfVxuICAgIGNyZWF0ZShpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIsIGRlY2xhcmF0b3IpXG4gICAgZGVjbGFyYXRpb25zLnB1c2goZGVjbGFyYXRvcilcbiAgfVxuXG4gIGRlY2xhcmF0aW9ucy5wdXNoKHtcbiAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICBpZDoge1xuICAgICAgdHlwZTogJ09iamVjdFBhdHRlcm4nLFxuICAgICAgcHJvcGVydGllczogb3RoZXJTcGVjaWZpZXJzLm1hcChmdW5jdGlvbiAoc3BlY2lmaWVyKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7SWRlbnRpZmllciB8IExpdGVyYWx9ICovXG4gICAgICAgIGxldCBrZXkgPVxuICAgICAgICAgIHNwZWNpZmllci50eXBlID09PSAnSW1wb3J0U3BlY2lmaWVyJ1xuICAgICAgICAgICAgPyBzcGVjaWZpZXIuaW1wb3J0ZWRcbiAgICAgICAgICAgIDogc3BlY2lmaWVyLnR5cGUgPT09ICdFeHBvcnRTcGVjaWZpZXInXG4gICAgICAgICAgICAgID8gc3BlY2lmaWVyLmV4cG9ydGVkXG4gICAgICAgICAgICAgIDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2RlZmF1bHQnfVxuICAgICAgICBsZXQgdmFsdWUgPSBzcGVjaWZpZXIubG9jYWxcblxuICAgICAgICAvLyBTd2l0Y2ggdGhlbSBhcm91bmQgaWYgd2XigJlyZSBleHBvcnRpbmcuXG4gICAgICAgIGlmIChzcGVjaWZpZXIudHlwZSA9PT0gJ0V4cG9ydFNwZWNpZmllcicpIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleVxuICAgICAgICAgIGtleSA9IHNwZWNpZmllci5sb2NhbFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG8gZG86IHdoYXQgdG8gZG8gYWJvdXQgbGl0ZXJhbHM/XG4gICAgICAgIC8vIGBjb25zdCB7IGE6ICdiJyB9ID0gYygpYCBkb2VzIG5vdCB3b3JrP1xuICAgICAgICBhc3NlcnQodmFsdWUudHlwZSA9PT0gJ0lkZW50aWZpZXInKVxuXG4gICAgICAgIC8qKiBAdHlwZSB7QXNzaWdubWVudFByb3BlcnR5fSAqL1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHtcbiAgICAgICAgICB0eXBlOiAnUHJvcGVydHknLFxuICAgICAgICAgIGtpbmQ6ICdpbml0JyxcbiAgICAgICAgICBzaG9ydGhhbmQ6XG4gICAgICAgICAgICBrZXkudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmXG4gICAgICAgICAgICB2YWx1ZS50eXBlID09PSAnSWRlbnRpZmllcicgJiZcbiAgICAgICAgICAgIGtleS5uYW1lID09PSB2YWx1ZS5uYW1lLFxuICAgICAgICAgIG1ldGhvZDogZmFsc2UsXG4gICAgICAgICAgY29tcHV0ZWQ6IGZhbHNlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZShzcGVjaWZpZXIsIHByb3BlcnR5KVxuICAgICAgICByZXR1cm4gcHJvcGVydHlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBpbml0OiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcbiAgICAgID8ge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLmxvY2FsLm5hbWV9XG4gICAgICA6IGluaXRcbiAgfSlcblxuICByZXR1cm4gZGVjbGFyYXRpb25zXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/devlop/lib/development.js\");\n/**\n * @import {Expression} from 'estree-jsx'\n */\n\n\n\n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */\nfunction toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, 'expected non-empty `expressions` to be passed')\n  return left\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxZQUFZLFlBQVk7QUFDeEI7O0FBRW1DOztBQUVuQztBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckM7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixzREFBc0Q7QUFDekU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXRvLWJpbmFyeS1hZGRpdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0V4cHJlc3Npb259IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8RXhwcmVzc2lvbj59IGV4cHJlc3Npb25zXG4gKiAgIEV4cHJlc3Npb25zLlxuICogQHJldHVybnMge0V4cHJlc3Npb259XG4gKiAgIEFkZGl0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9CaW5hcnlBZGRpdGlvbihleHByZXNzaW9ucykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0V4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBsZWZ0XG5cbiAgd2hpbGUgKCsraW5kZXggPCBleHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICBjb25zdCByaWdodCA9IGV4cHJlc3Npb25zW2luZGV4XVxuICAgIGxlZnQgPSBsZWZ0ID8ge3R5cGU6ICdCaW5hcnlFeHByZXNzaW9uJywgbGVmdCwgb3BlcmF0b3I6ICcrJywgcmlnaHR9IDogcmlnaHRcbiAgfVxuXG4gIGFzc2VydChsZWZ0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBleHByZXNzaW9uc2AgdG8gYmUgcGFzc2VkJylcbiAgcmV0dXJuIGxlZnRcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @import {\n      Identifier,\n      JSXIdentifier,\n      JSXMemberExpression,\n      Literal,\n      MemberExpression\n * } from 'estree-jsx'\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */\nfunction toIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    /** @type {Identifier | Literal} */\n    const id =\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n    object = object\n      ? {\n          type: 'MemberExpression',\n          object,\n          property: id,\n          computed: id.type === 'Literal',\n          optional: false\n        }\n      : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== 'Literal', 'expected identifier as left-most value')\n  return object\n}\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */\nfunction toJsxIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {JSXIdentifier | JSXMemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {jsx: true}),\n      'expected valid jsx identifier, not `' + name + '`'\n    )\n\n    /** @type {JSXIdentifier} */\n    const id = {type: 'JSXIdentifier', name}\n    object = object ? {type: 'JSXMemberExpression', object, property: id} : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  return object\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVtQztBQUNvQzs7QUFFdkU7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEscURBQXFEO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBLGtDQUFrQyxvRUFBZ0I7QUFDbEQsV0FBVztBQUNYLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLDBDQUFNO0FBQ1IsRUFBRSwyQ0FBTTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsaURBQWlEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDJDQUFNO0FBQ1Ysa0NBQWtDLG9FQUFnQixRQUFRLFVBQVU7QUFDcEU7QUFDQTs7QUFFQSxlQUFlLGVBQWU7QUFDOUIsZ0JBQWdCO0FBQ2hCLHVCQUF1QixtREFBbUQ7QUFDMUU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXRvLWlkLW9yLW1lbWJlci1leHByZXNzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gICAgICBJZGVudGlmaWVyLFxuICAgICAgSlNYSWRlbnRpZmllcixcbiAgICAgIEpTWE1lbWJlckV4cHJlc3Npb24sXG4gICAgICBMaXRlcmFsLFxuICAgICAgTWVtYmVyRXhwcmVzc2lvblxuICogfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge25hbWUgYXMgaXNJZGVudGlmaWVyTmFtZX0gZnJvbSAnZXN0cmVlLXV0aWwtaXMtaWRlbnRpZmllci1uYW1lJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxudW1iZXIgfCBzdHJpbmc+fSBpZHNcbiAqICAgSWRlbnRpZmllcnMgKGV4YW1wbGU6IGBbJ2xpc3QnLCAwXSkuXG4gKiBAcmV0dXJucyB7SWRlbnRpZmllciB8IE1lbWJlckV4cHJlc3Npb259XG4gKiAgIElkZW50aWZpZXIgb3IgbWVtYmVyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKGlkcykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsIHwgTWVtYmVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG9iamVjdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgaWRzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5hbWUgPSBpZHNbaW5kZXhdXG4gICAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbH0gKi9cbiAgICBjb25zdCBpZCA9XG4gICAgICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgaXNJZGVudGlmaWVyTmFtZShuYW1lKVxuICAgICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWV9XG4gICAgICAgIDoge3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6IG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0XG4gICAgICA/IHtcbiAgICAgICAgICB0eXBlOiAnTWVtYmVyRXhwcmVzc2lvbicsXG4gICAgICAgICAgb2JqZWN0LFxuICAgICAgICAgIHByb3BlcnR5OiBpZCxcbiAgICAgICAgICBjb21wdXRlZDogaWQudHlwZSA9PT0gJ0xpdGVyYWwnLFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICA6IGlkXG4gIH1cblxuICBhc3NlcnQob2JqZWN0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBpZHNgIHRvIGJlIHBhc3NlZCcpXG4gIGFzc2VydChvYmplY3QudHlwZSAhPT0gJ0xpdGVyYWwnLCAnZXhwZWN0ZWQgaWRlbnRpZmllciBhcyBsZWZ0LW1vc3QgdmFsdWUnKVxuICByZXR1cm4gb2JqZWN0XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PG51bWJlciB8IHN0cmluZz59IGlkc1xuICogICBJZGVudGlmaWVycyAoZXhhbXBsZTogYFsnbGlzdCcsIDBdKS5cbiAqIEByZXR1cm5zIHtKU1hJZGVudGlmaWVyIHwgSlNYTWVtYmVyRXhwcmVzc2lvbn1cbiAqICAgSWRlbnRpZmllciBvciBtZW1iZXIgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24oaWRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllciB8IEpTWE1lbWJlckV4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBvYmplY3RcblxuICB3aGlsZSAoKytpbmRleCA8IGlkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuYW1lID0gaWRzW2luZGV4XVxuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBpc0lkZW50aWZpZXJOYW1lKG5hbWUsIHtqc3g6IHRydWV9KSxcbiAgICAgICdleHBlY3RlZCB2YWxpZCBqc3ggaWRlbnRpZmllciwgbm90IGAnICsgbmFtZSArICdgJ1xuICAgIClcblxuICAgIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllcn0gKi9cbiAgICBjb25zdCBpZCA9IHt0eXBlOiAnSlNYSWRlbnRpZmllcicsIG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0ID8ge3R5cGU6ICdKU1hNZW1iZXJFeHByZXNzaW9uJywgb2JqZWN0LCBwcm9wZXJ0eTogaWR9IDogaWRcbiAgfVxuXG4gIGFzc2VydChvYmplY3QsICdleHBlY3RlZCBub24tZW1wdHkgYGlkc2AgdG8gYmUgcGFzc2VkJylcbiAgcmV0dXJuIG9iamVjdFxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/extnames.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/extnames.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   md: () => (/* binding */ md),\n/* harmony export */   mdx: () => (/* binding */ mdx)\n/* harmony export */ });\n/* harmony import */ var markdown_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! markdown-extensions */ \"(rsc)/./node_modules/markdown-extensions/index.js\");\n\n\nconst md = markdown_extensions__WEBPACK_IMPORTED_MODULE_0__[\"default\"].map(function (d) {\n  return '.' + d\n})\nconst mdx = ['.mdx']\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXh0bmFtZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EOztBQUU3QyxXQUFXLDJEQUFrQjtBQUNwQztBQUNBLENBQUM7QUFDTSIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXh0bmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1hcmtkb3duRXh0ZW5zaW9ucyBmcm9tICdtYXJrZG93bi1leHRlbnNpb25zJ1xuXG5leHBvcnQgY29uc3QgbWQgPSBtYXJrZG93bkV4dGVuc2lvbnMubWFwKGZ1bmN0aW9uIChkKSB7XG4gIHJldHVybiAnLicgKyBkXG59KVxuZXhwb3J0IGNvbnN0IG1keCA9IFsnLm1keCddXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/extnames.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveFileAndOptions: () => (/* binding */ resolveFileAndOptions)\n/* harmony export */ });\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vfile */ \"(rsc)/./node_modules/vfile/lib/index.js\");\n/* harmony import */ var _extnames_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extnames.js */ \"(rsc)/./node_modules/@mdx-js/mdx/lib/util/extnames.js\");\n/**\n * @import {Compatible} from 'vfile'\n * @import {CompileOptions} from '../compile.js'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n\n\n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   File.\n * @param {Readonly<CompileOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {{file: VFile, options: ProcessorOptions}}\n *   File and options.\n */\nfunction resolveFileAndOptions(vfileCompatible, options) {\n  const file = looksLikeAVFile(vfileCompatible)\n    ? vfileCompatible\n    : new vfile__WEBPACK_IMPORTED_MODULE_0__.VFile(vfileCompatible)\n  const {format, ...rest} = options || {}\n  return {\n    file,\n    options: {\n      format:\n        format === 'md' || format === 'mdx'\n          ? format\n          : file.extname && (rest.mdExtensions || _extnames_js__WEBPACK_IMPORTED_MODULE_1__.md).includes(file.extname)\n            ? 'md'\n            : 'mdx',\n      ...rest\n    }\n  }\n}\n\n/**\n * @param {Readonly<Compatible> | null | undefined} [value]\n *   Thing.\n * @returns {value is VFile}\n *   Check.\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvcmVzb2x2ZS1maWxlLWFuZC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCLFlBQVksZ0JBQWdCO0FBQzVCLFlBQVksa0JBQWtCO0FBQzlCOztBQUUyQjtBQUNLOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLFVBQVUsd0NBQUs7QUFDZixTQUFTLGlCQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsNENBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx5Q0FBeUM7QUFDcEQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0NvbXBhdGlibGV9IGZyb20gJ3ZmaWxlJ1xuICogQGltcG9ydCB7Q29tcGlsZU9wdGlvbnN9IGZyb20gJy4uL2NvbXBpbGUuanMnXG4gKiBAaW1wb3J0IHtQcm9jZXNzb3JPcHRpb25zfSBmcm9tICcuLi9jb3JlLmpzJ1xuICovXG5cbmltcG9ydCB7VkZpbGV9IGZyb20gJ3ZmaWxlJ1xuaW1wb3J0IHttZH0gZnJvbSAnLi9leHRuYW1lcy5qcydcblxuLyoqXG4gKiBDcmVhdGUgYSBmaWxlIGFuZCBvcHRpb25zIGZyb20gYSBnaXZlbiBgdmZpbGVDb21wYXRpYmxlYCBhbmQgb3B0aW9ucyB0aGF0XG4gKiBtaWdodCBjb250YWluIGBmb3JtYXQ6ICdkZXRlY3QnYC5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBhdGlibGU+fSB2ZmlsZUNvbXBhdGlibGVcbiAqICAgRmlsZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHt7ZmlsZTogVkZpbGUsIG9wdGlvbnM6IFByb2Nlc3Nvck9wdGlvbnN9fVxuICogICBGaWxlIGFuZCBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgb3B0aW9ucykge1xuICBjb25zdCBmaWxlID0gbG9va3NMaWtlQVZGaWxlKHZmaWxlQ29tcGF0aWJsZSlcbiAgICA/IHZmaWxlQ29tcGF0aWJsZVxuICAgIDogbmV3IFZGaWxlKHZmaWxlQ29tcGF0aWJsZSlcbiAgY29uc3Qge2Zvcm1hdCwgLi4ucmVzdH0gPSBvcHRpb25zIHx8IHt9XG4gIHJldHVybiB7XG4gICAgZmlsZSxcbiAgICBvcHRpb25zOiB7XG4gICAgICBmb3JtYXQ6XG4gICAgICAgIGZvcm1hdCA9PT0gJ21kJyB8fCBmb3JtYXQgPT09ICdtZHgnXG4gICAgICAgICAgPyBmb3JtYXRcbiAgICAgICAgICA6IGZpbGUuZXh0bmFtZSAmJiAocmVzdC5tZEV4dGVuc2lvbnMgfHwgbWQpLmluY2x1ZGVzKGZpbGUuZXh0bmFtZSlcbiAgICAgICAgICAgID8gJ21kJ1xuICAgICAgICAgICAgOiAnbWR4JyxcbiAgICAgIC4uLnJlc3RcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBhdGlibGU+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW3ZhbHVlXVxuICogICBUaGluZy5cbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBWRmlsZX1cbiAqICAgQ2hlY2suXG4gKi9cbmZ1bmN0aW9uIGxvb2tzTGlrZUFWRmlsZSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICB2YWx1ZSAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ21lc3NhZ2UnIGluIHZhbHVlICYmXG4gICAgICAnbWVzc2FnZXMnIGluIHZhbHVlXG4gIClcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\n");

/***/ })

};
;